import 'chromedriver';
import { By } from 'selenium-webdriver';
import DriverService from './common/driver_service';
import {
  wait,
  getXpathNodeWith,
  getElementWithTimeout,
} from './common/action_service';
import {
  addMalwareAnalysesReport,
  navigateToMalwareAnalysesReport,
  selectMalwareAnalysesReport,
  editMalwareAnalysesReport,
} from './common/malware_analyses_service';
import { deleteDomainObject } from './common/domain_object_service';
import { logIn_LocalStrategy } from './common/auth_service';

/* eslint no-console: ["error", { allow: ["warn", "error"] }] */

describe('Malware Analyses Workflow', () => {
  const PRODUCT = 'Test Malware Analyses Product Field - Product';
  const REPORT = 'Test Malware Report Name Field - Report';
  const UPDATED_PRODUCT = 'UPDATED Malware Analyses Product Field - Product';
  const UPDATED_REPORT = 'UPDATED Malware Report Name Field - Report';

  beforeAll(async () => {
    await logIn_LocalStrategy();
    await wait(); // Wait for login
  });

  afterAll(async () => {
    await DriverService.teardownDriver();
  });

  test('create a malware analysis report', async () => {
    await navigateToMalwareAnalysesReport();
    await addMalwareAnalysesReport(PRODUCT, REPORT);
  });

  test('view a malware analysis report', async () => {
    await navigateToMalwareAnalysesReport();
    await selectMalwareAnalysesReport(PRODUCT);
    await wait(5000);

    // Check that the product field is correct
    const productField = await getXpathNodeWith('text', PRODUCT);
    const actualProduct = await productField.getText();
    expect(actualProduct).toBe(PRODUCT);

    // Check that the report field is correct
    const reportField = await getXpathNodeWith('text', REPORT);
    const actualReport = await reportField.getText();
    expect(actualReport).toBe(REPORT);
  });

  test('edit a malware analysis report', async () => {
    await navigateToMalwareAnalysesReport();
    await wait(1000);
    await selectMalwareAnalysesReport(PRODUCT);
    await wait(3000);
    await editMalwareAnalysesReport(UPDATED_PRODUCT, UPDATED_REPORT);
  });

  test('delete a malware analysis report', async () => {
    // select and delete the updated analyses report
    try {
      await navigateToMalwareAnalysesReport();
      // if malware analyses report can't be found this will properly throw error
      expect(await selectMalwareAnalysesReport(UPDATED_PRODUCT)).toBeUndefined();
      await wait(3000);
      await deleteDomainObject();
      await wait(5000);
    } catch (error) {
      console.error(`Unable to delete the malware analyses report ${UPDATED_PRODUCT}`);
      throw error;
    }

    // ensure the report was deleted
    try {
      const t = async () => {
        await getElementWithTimeout(By.xpath(`//*[text()="${UPDATED_PRODUCT}"]/ancestor::a`));
      };
      // RxJS instanceof TimeoutError expects TimeoutErrorImpl for some reason
      // await expect(t).rejects.toThrow(TimeoutError);
      await expect(t).rejects.toThrow();
    } catch (error) {
      console.error(`Unable to delete the malware analyses report ${UPDATED_PRODUCT}`);
      throw error;
    }
  });
});
