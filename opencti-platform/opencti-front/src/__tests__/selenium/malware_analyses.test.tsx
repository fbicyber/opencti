import 'chromedriver';
import { By } from 'selenium-webdriver';
import DriverService from './common/driver_service';
import {
  wait,
  getXpathNodeWith,
  getElementWithTimeout,
} from './common/action_service';
import {
  addMalwareAnalysesReport,
  navigateToMalwareAnalysesReport,
  selectMalwareAnalysesReport,
  editMalwareAnalysesReport,
} from './common/malware_analyses_service';
import { deleteDomainObject } from './common/domain_object_service';
import { logIn_LocalStrategy } from './common/auth_service';

/* eslint no-console: ["error", { allow: ["warn", "error"] }] */

describe('Malware Analyses Workflow', () => {
  const PRODUCT = 'Test Malware Analyses Product Field - Product';
  const REPORT = 'Test Malware Report Name Field - Report';
  const UPDATED_PRODUCT = 'UPDATED Malware Analyses Product Field - Product';
  const UPDATED_REPORT = 'UPDATED Malware Report Name Field - Report';

  beforeAll(async () => {
    await logIn_LocalStrategy();
    await wait(); // Wait for login
  });

  afterAll(async () => {
    await DriverService.teardownDriver();
  });

  test('create a malware analyses report', async () => {
    try {
      await navigateToMalwareAnalysesReport();
      await addMalwareAnalysesReport(PRODUCT, REPORT);
    } catch (error) {
      console.error('Unable to create malware analyses report');
      throw error;
    }
  });

  test('view a malware analyses report', async () => {
    try {
      await selectMalwareAnalysesReport(PRODUCT);
      await wait(3000);

      // Check that the product field is correct
      await getXpathNodeWith('text', PRODUCT)
        .then((elem) => elem.getText())
        .then((val) => expect(val).toBe(PRODUCT));

      // Check that the report field is correct
      await getXpathNodeWith('text', REPORT)
        .then((elem) => elem.getText())
        .then((val) => expect(val).toBe(REPORT));
    } catch (error) {
      console.error('Unable to validate created malware analyses report');
      throw error;
    }
  });

  test('edit a malware analyses report', async () => {
    try {
      await selectMalwareAnalysesReport(PRODUCT);
      await wait(3000);
      await editMalwareAnalysesReport(UPDATED_PRODUCT, UPDATED_REPORT);
    } catch (error) {
      console.error('Unable to edit created analyses report');
      throw error;
    }
  });

  test('delete a malware analyses report', async () => {
    // select and delete the updated analyses report
    try {
      await selectMalwareAnalysesReport(UPDATED_PRODUCT);
      await wait(3000);

      await deleteDomainObject();
      await wait(3000);

      // ensure the report was deleted
      const t = async () => {
        await getElementWithTimeout(By.xpath(`//*[text()="${UPDATED_PRODUCT}"]/ancestor::a`));
      };
      // RxJS instanceof TimeoutError expects TimeoutErrorImpl for some reason
      await expect(t).rejects.toThrow();
    } catch (error) {
      console.error('Unable to delete the malware analyses report');
      throw error;
    }
  });
});
