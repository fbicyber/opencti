import { By } from 'selenium-webdriver';
import {
  getElementWithTimeout,
  wait,
  getDateTime,
  replaceTextFieldValue,
} from './action_service';
import { goToObjectOverview, selectObject } from './domain_object_service';

/**
 * Navigates to the Malware malware analysis Report list displayer.
 *
 * @param id Optional internal ID of the malware analysis Object
 */
export async function navigateToMalwareAnalysesReport(id = '?sortBy=submitted&orderAsc=false') {
  await goToObjectOverview('analyses', 'malware_analyses', id);
}

/**
 * Assuming we are on the malware analysis Report list displayer, click the create
 * button and create a new malware analysis Report.
 *
 * @param name The name of the malware analysis Report to create.
 * @param description The description of the malware analysis Report to create.
 */
export async function addMalwareAnalysesReport(product: string, report: string) {
  // Click add button
  const addBtn = await getElementWithTimeout(By.id('add-malware-analyses'));
  await addBtn.click();
  await wait(2000);

  // Fill product
  const productField = await getElementWithTimeout(By.id('malware-analyses-product'));
  // Sometimes fails to find name field fast enough.
  await wait(2000);
  await productField.click();
  await productField.sendKeys(product);

  // Fill report name
  const nameField = await getElementWithTimeout(By.id('malware-analyses-report-name'));
  // Sometimes fails to find name field fast enough.
  await wait(2000);
  await nameField.click();
  await nameField.sendKeys(report);

  // Fill Report Date
  const reportDate = await getElementWithTimeout(By.id('malware-analyses-date'));
  await wait(1000);
  await reportDate.click();
  const formattedDate = getDateTime();
  await replaceTextFieldValue(reportDate, formattedDate);
  await wait(1000);

  // Click create button
  const createBtn = await getElementWithTimeout(By.id('malware-analyses-create-button'));
  await wait(2000);

  await createBtn.click();

  await wait(2000);
}
/**
 * Tries to click on an Case malware analysis Report with the given name.
 *
 * @param name The new Case Analyses Report name
 */
export async function editMalwareAnalysesReport(product: string, name: string) {
  // Click edit button
  const editBtn = await getElementWithTimeout(By.id('EditIcon'));
  await editBtn.click();
  await wait(1000);
  // Fill name
  const nameField = await getElementWithTimeout(By.id('malware-analyses-report-name'));
  // Sometimes fails to find name field fast enough.
  await wait(1000);
  await nameField.click();
  await wait(1000);
  await replaceTextFieldValue(nameField, name);
  await wait(1000);

  // Fill product
  const productField = await getElementWithTimeout(By.id('malware-analyses-product'));
  // Sometimes fails to find name field fast enough.
  await wait(1000);
  await productField.click();
  await wait(1000);
  await replaceTextFieldValue(productField, product);
  await wait(1000);

  // Fill Report Date
  const reportDate = await getElementWithTimeout(By.id('malware-analyses-date'));
  await wait(1000);
  await reportDate.click();
  await wait(1000);
  const formattedDate = getDateTime();
  await replaceTextFieldValue(reportDate, formattedDate);
  await wait(1000);
  // Click close button
  const closeBtn = await getElementWithTimeout(By.id('closeIcon'));
  await closeBtn.click();
}

/**
 * Tries to click on an Case malware analysis Report with the given name.
 *
 * @param name The name of the Case malware analysis Report to select.
 */
export async function selectMalwareAnalysesReport(product: string) {
  await navigateToMalwareAnalysesReport();
  await selectObject(product);
}

export async function navigateToAnalysisReportHelperSelect(product: string, id = '') {
  navigateToMalwareAnalysesReport(id);
  selectMalwareAnalysesReport(product);
}
