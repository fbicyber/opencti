import { By } from 'selenium-webdriver';
import {
  getElementWithTimeout,
  wait,
  getDateTime,
  replaceTextFieldValue,
} from './action_service';
import { goToObjectOverview, selectObject } from './domain_object_service';

/* eslint no-console: ["error", { allow: ["warn", "error"] }] */

/**
 * Navigates to the Malware malware analysis Report list displayer.
 *
 * @param id Optional internal ID of the malware analysis Object
 */
export async function navigateToMalwareAnalysesReport(id = '?sortBy=submitted&orderAsc=false') {
  await goToObjectOverview('analyses', 'malware_analyses', id);
}

/**
 * Assuming we are on the malware analysis Report list displayer, click the create
 * button and create a new malware analysis Report.
 *
 * @param name The name of the malware analysis Report to create.
 * @param description The description of the malware analysis Report to create.
 */
export async function addMalwareAnalysesReport(product: string, report: string) {
  // Click add button
  await getElementWithTimeout(By.id('add-malware-analyses'))
    .then((btn) => (btn.click()));
  await wait(2000);

  // Fill product
  await getElementWithTimeout(By.id('malware-analyses-product'))
    .then((field) => replaceTextFieldValue(field, product));
  await wait(2000);

  // check that product was set correctly
  await getElementWithTimeout(By.id('malware-analyses-product'))
    .then((elem) => elem.getAttribute('value'))
    .then((val) => expect(val).toBe(product));

  // Fill report name
  await getElementWithTimeout(By.id('malware-analyses-report-name'))
    .then((field) => replaceTextFieldValue(field, report));
  await wait(2000);

  // check that report was set correctly
  await getElementWithTimeout(By.id('malware-analyses-report-name'))
    .then((elem) => elem.getAttribute('value'))
    .then((val) => expect(val).toBe(report));

  // Fill Report Date
  // TODO: Check it is changed correctly
  const formattedDate = getDateTime();
  await getElementWithTimeout(By.id('malware-analyses-date'))
    .then((field) => replaceTextFieldValue(field, formattedDate));
  await wait(2000);

  // Click create button
  await getElementWithTimeout(By.id('malware-analyses-create-button'))
    .then((btn) => (btn.click()));
}
/**
 * Tries to click on an Case malware analysis Report with the given name.
 *
 * @param name The new Case Analyses Report name
 */
export async function editMalwareAnalysesReport(product: string, report: string) {
  // Click edit button
  await getElementWithTimeout(By.id('EditIcon'))
    .then((btn) => (btn.click()));
  await wait(2000);

  // Fill name
  await getElementWithTimeout(By.id('malware-analyses-report-name'))
    .then((field) => replaceTextFieldValue(field, report));
  await wait(2000);

  // check that value was changed correctly
  await getElementWithTimeout(By.id('malware-analyses-report-name'))
    .then((elem) => elem.getAttribute('value'))
    .then((val) => expect(val).toBe(report));

  // Fill product
  await getElementWithTimeout(By.id('malware-analyses-product'))
    .then((field) => replaceTextFieldValue(field, product));
  await wait(2000);

  // check that product was set correctly
  await getElementWithTimeout(By.id('malware-analyses-product'))
    .then((elem) => elem.getAttribute('value'))
    .then((val) => expect(val).toBe(product));

  // Fill Report Date
  // TODO: Check it is changed correctly
  const formattedDate = getDateTime();
  await getElementWithTimeout(By.id('malware-analyses-date'))
    .then((field) => replaceTextFieldValue(field, formattedDate));
  await wait(2000);

  // Click close button
  await getElementWithTimeout(By.id('closeIcon'))
    .then((btn) => (btn.click()));
}

/**
 * Tries to click on an Case malware analysis Report with the given name.
 *
 * @param name The name of the Case malware analysis Report to select.
 */
export async function selectMalwareAnalysesReport(product: string) {
  await navigateToMalwareAnalysesReport();
  await selectObject(product);
}

export async function navigateToAnalysisReportHelperSelect(product: string, id = '') {
  navigateToMalwareAnalysesReport(id);
  selectMalwareAnalysesReport(product);
}
