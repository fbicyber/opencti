import { By } from 'selenium-webdriver';
import {
  getElementWithTimeout,
  wait,
  getDateTime,
  replaceTextFieldValue,
} from './action_service';
import { goToObjectOverview, selectObject } from './domain_object_service';

/* eslint no-console: ["error", { allow: ["warn", "error"] }] */

/**
 * Navigates to the Malware malware analysis Report list displayer.
 *
 * @param id Optional internal ID of the malware analysis Object
 */
export async function navigateToMalwareAnalysesReport(id = '?sortBy=submitted&orderAsc=false') {
  await goToObjectOverview('analyses', 'malware_analyses', id);
}

/**
 * Assuming we are on the malware analysis Report list displayer, click the create
 * button and create a new malware analysis Report.
 *
 * @param name The name of the malware analysis Report to create.
 * @param description The description of the malware analysis Report to create.
 */
export async function addMalwareAnalysesReport(product: string, report: string) {
  // Click add button
  try {
    const addBtn = await getElementWithTimeout(By.id('add-malware-analyses'));
    await addBtn.click();
    await wait(2000);
  } catch (error) {
    console.error('Unable to interact with add malware button');
    throw error;
  }

  // Fill product
  try {
    const productField = await getElementWithTimeout(By.id('malware-analyses-product'));
    // Sometimes fails to find name field fast enough.
    await wait(2000);
    await productField.click();
    await productField.sendKeys(product);

    // check that product was set correctly
    await getElementWithTimeout(By.id('malware-analyses-product'))
      .then((elem) => elem.getAttribute('value'))
      .then((val) => expect(val).toBe(product));
  } catch (error) {
    console.error('Unable to edit the malware analyses product');
    throw error;
  }

  // Fill report name
  try {
    const nameField = await getElementWithTimeout(By.id('malware-analyses-report-name'));
    // Sometimes fails to find name field fast enough.
    await wait(2000);
    await nameField.click();
    await nameField.sendKeys(report);

    // check that report was set correctly
    await getElementWithTimeout(By.id('malware-analyses-report-name'))
      .then((elem) => elem.getAttribute('value'))
      .then((val) => expect(val).toBe(report));
  } catch (error) {
    console.error('Unable to edit the malware analyses report name');
    throw error;
  }

  // // Fill Report Date
  try {
    // get the date field
    const reportDate = await getElementWithTimeout(By.id('malware-analyses-date'));
    await wait(1000);
    await reportDate.click();

    // change the date
    const formattedDate = getDateTime();
    await replaceTextFieldValue(reportDate, formattedDate);
    await wait(1000);
  } catch (error) {
    console.error('Unable to edit the malware analyses report date');
    throw error;
  }

  // Click create button
  try {
    const createBtn = await getElementWithTimeout(By.id('malware-analyses-create-button'));
    await wait(2000);
    await createBtn.click();
    await wait(2000);
  } catch (error) {
    console.error('Unable to create malware analyses report');
    throw error;
  }
}
/**
 * Tries to click on an Case malware analysis Report with the given name.
 *
 * @param name The new Case Analyses Report name
 */
export async function editMalwareAnalysesReport(product: string, report: string) {
  // Click edit button
  try {
    const editBtn = await getElementWithTimeout(By.id('EditIcon'));
    await editBtn.click();
    await wait(1000);
  } catch (error) {
    console.error('Unable to interact with malware analyses edit button');
    throw error;
  }

  // Fill name
  try {
    const reportField = await getElementWithTimeout(By.id('malware-analyses-report-name'));
    // Sometimes fails to find name field fast enough.
    await wait(1000);
    await reportField.click();
    await wait(1000);

    // change the value
    await replaceTextFieldValue(reportField, report);
    await wait(1000);

    // check that value was changed correctly
    await getElementWithTimeout(By.id('malware-analyses-report-name'))
      .then((elem) => elem.getAttribute('value'))
      .then((val) => expect(val).toBe(report));
  } catch (error) {
    console.error('Unable to edit the malware analyses report name');
    throw error;
  }

  // Fill product
  try {
    const productField = await getElementWithTimeout(By.id('malware-analyses-product'));
    // Sometimes fails to find name field fast enough.
    await wait(1000);
    await productField.click();
    await wait(1000);

    // change the value
    await replaceTextFieldValue(productField, product);
    await wait(1000);

    // check that product was set correctly
    await getElementWithTimeout(By.id('malware-analyses-product'))
      .then((elem) => elem.getAttribute('value'))
      .then((val) => expect(val).toBe(product));
  } catch (error) {
    console.error('Unable to edit the malware analyses product field');
    throw error;
  }

  // // Fill Report Date
  try {
    // get the date
    const reportDate = await getElementWithTimeout(By.id('malware-analyses-date'));
    await wait(1000);
    await reportDate.click();
    await wait(1000);

    // change the date
    const formattedDate = getDateTime();
    await replaceTextFieldValue(reportDate, formattedDate);
    await wait(1000);
  } catch (error) {
    console.error('Unable to edit the malware analyses report date');
    throw error;
  }

  // Click close button
  try {
    const closeBtn = await getElementWithTimeout(By.id('closeIcon'));
    await closeBtn.click();
  } catch (error) {
    console.error('Unable to commit edits the malware analyses');
    throw error;
  }
}

/**
 * Tries to click on an Case malware analysis Report with the given name.
 *
 * @param name The name of the Case malware analysis Report to select.
 */
export async function selectMalwareAnalysesReport(product: string) {
  await navigateToMalwareAnalysesReport();
  await selectObject(product);
}

export async function navigateToAnalysisReportHelperSelect(product: string, id = '') {
  navigateToMalwareAnalysesReport(id);
  selectMalwareAnalysesReport(product);
}
